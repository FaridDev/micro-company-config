info:
  app:
    name: Project service - Query Side
    description: Project service - Query Side (CQRS)

server:
  port: 8083
    
logging:
  level:
    root: INFO
    org.springframework: INFO
    org.axonframework: DEBUG
    com.idugalic: DEBUG

spring:
  application:
    exchange: project.events.fanout.exchange
    queue: project.view.event.stream
    terminal: project.axon.terminal
  rabbitmq:
    hostname: 192.168.99.100
    username: test
    password: password
  data:
    mongodb:
      uri: mongodb://192.168.99.100:27017/projects

      
security:
  oauth2:
    resource:
      jwt:
        keyUri: http://${authserver.hostname}:${authserver.port}/${authserver.contextPath}/oauth/token_key
        keyValue: |
          -----BEGIN PUBLIC KEY-----
          MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAnGp/Q5lh0P8nPL21oMMrt2RrkT9AW5jgYwLfSUnJVc9G6uR3cXRRDCjHqWU5WYwivcF180A6CWp/ireQFFBNowgc5XaA0kPpzEtgsA5YsNX7iSnUibB004iBTfU9hZ2Rbsc8cWqynT0RyN4TP1RYVSeVKvMQk4GT1r7JCEC+TNu1ELmbNwMQyzKjsfBXyIOCFU/E94ktvsTZUHF4Oq44DBylCDsS1k7/sfZC2G5EU7Oz0mhG8+Uz6MSEQHtoIi6mc8u64Rwi3Z3tscuWG2ShtsUFuNSAFNkY7LkLn+/hxLCu2bNISMaESa8dG22CIMuIeRLVcAmEWEWH5EEforTg+QIDAQAB
          -----END PUBLIC KEY-----


eureka:
  client:
    serviceUrl:
      defaultZone: ${vcap.services.eureka.credentials.uri:http://localhost:8761}/eureka/

      
# The OAuth2 server definition that would be used to send the authorization requests to
authserver:
  hostname: localhost
  port: 9999
  contextPath: uaa


---
spring:
  profiles: docker
  rabbitmq:
    hostname: ${MY_RABBIT_PORT_5671_TCP_ADDR}
    username: test
    password: password
  data:
    mongodb:
      uri: mongodb://${MY_MONGO_PORT_27017_TCP_ADDR}:${MY_MONGO_PORT_27017_TCP_PORT}/blogposts

eureka:
# Register our microservices to Eureka using hostnames in a Docker environment will not work, they will all get 
# one and the same hostname. Instead we configure them to use its IP address during registration with Eureka.
  instance:
    preferIpAddress: true
  client:
    serviceUrl:
      defaultZone: http://${REGISTRY_PORT_8761_TCP_ADDR}:${REGISTRY_PORT_8761_TCP_PORT}/eureka/
      
authserver:
  hostname: ${AUTHSERVER_PORT_9999_TCP_ADDR}
  port: ${AUTHSERVER_1_PORT_9999_TCP_PORT}
  contextPath: uaa


---
spring:
  profiles: cloud

authserver:
  hostname: http://authserver-idugalic.cfapps.io
  port: 80
  contextPath: uaa
  
eureka:
  instance:
    hostname: ${vcap.application.uris[0]}
    nonSecurePort: 80
